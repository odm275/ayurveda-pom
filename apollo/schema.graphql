### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DeleteTaskViewerInput {
  id: String!
}

input LogInInput {
  code: String!
}

type Mutation {
  deleteTask(input: DeleteTaskViewerInput): Task!
  logIn(date: String, input: LogInInput): Viewer!
  logOut: Viewer!
  updateTasks(input: UpdateTaskUserInput): Tasks!

  """
  updates user in database when a pomodoro counter goes up, and when settings change
  """
  updateUserSettings(input: UpdateUserSettingsInput): Viewer!

  """
  Updates Viewer in database when a pomodoro counter goes up or when settings change.
  """
  updateViewerData(input: UpdateViewerDataInput): Viewer!
}

type PomData {
  """All the PomEntry(s) for a User. Note: [PomEntry!]! might be incorrect"""
  result: [PomEntry!]!

  """Total number of pomRecords"""
  total: Int
}

type PomEntry {
  count: Int
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  userId: String
}

type Query {
  authUrl: String!
}

type Task {
  amt: Int
  category: String
  createdAt: String
  eta: String
  id: ID
  isFinished: Boolean
  isNew: Boolean
  positionId: Int
  title: String
  user: String
}

input TaskInput {
  amt: Int
  createdAt: String
  eta: String
  id: String
  isFinished: Boolean
  isNew: Boolean
  title: String
}

type Tasks {
  """The total amt of tasks for a User"""
  result: [Task!]!

  """The total number of tasks for a User"""
  total: Int!
}

input UpdateTaskUserInput {
  tasks: [TaskInput]!
}

input UpdateUserSettingsInput {
  date: String
  longBreakDuration: Int
  longBreakInterval: Int
  pomCycle: pomCycle
  pomDuration: Int
  shortBreakDuration: Int
}

input UpdateViewerDataInput {
  date: String
  increasePomCounter: Boolean
  longBreakDuration: Int
  longBreakInterval: Int
  pomCycle: pomCycle
  pomDuration: Int
  shortBreakDuration: Int
}

type User {
  """Unique ID for the User"""
  id: ID!

  """Long break after a certain amt of pomodoro cycles are met"""
  longBreakDuration: Int

  """
  The amt of pomodoro cycles(pom,shortBreak) that have to happen before a long break
  """
  longBreakInterval: Int

  """name of the User"""
  name: String!

  """enum for reference pomodoro cycles by a string name"""
  pomCycle: pomCycle!

  """Generic duration for pomodoro"""
  pomDuration: Int

  """List of pomEntry(s)"""
  pomEntry: [PomEntry]!

  """Short break after pomodoro"""
  shortBreakDuration: Int
  status: String!

  """Tasks for today's date"""
  tasks: [Task]!
}

type Viewer {
  """User avatar(picture)"""
  avatar: String

  """Tasks that aren't finished aka ongoing for the User"""
  currentTasks: Tasks!

  """Confirmation that the user's request came back to the client"""
  didRequest: Boolean!

  """ID for a Viewer"""
  id: ID

  """User properties that the Viewer also has"""
  longBreakDuration: Int

  """User properties that the Viewer also has"""
  longBreakInterval: Int

  """pomodoro Count for the current day"""
  pomCount(date: String!): Int!

  """User properties that the Viewer also has"""
  pomCycle: pomCycle

  """Amount of pomodoros completed per day for a Viewer"""
  pomData: PomData!

  """User properties that the Viewer also has"""
  pomDuration: Int

  """User properties that the Viewer also has"""
  shortBreakDuration: Int
  token: String
}

enum pomCycle {
  LONGBREAK
  POMODORO
  SHORTBREAK
}
