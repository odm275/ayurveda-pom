### This file was generated by Nexus Schema
### Do not make changes to this file directly


input CreateTaskInput {
  amt: Int
  eta: String
  positionId: Int
  title: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DeleteTaskViewerInput {
  id: String!
}

input LogInInput {
  code: String!
}

type Mutation {
  createTask(input: CreateTaskInput): Task!
  deleteTask(input: DeleteTaskViewerInput): Task!
  logIn(date: String, input: LogInInput, today: String): User!
  logOut: User!

  """ Updates data that needs to be update whenever a pomodoro Cycle complates.
  """
  pomCycleUpdate(input: PomCycleUpdateInput): User!
  updateTasksPositions(input: UpdateTasksPositionsInput): Tasks!

  """
  Updates Viewer in database when a pomodoro counter goes up or when settings change.
  """
  updateViewerData(input: UpdateViewerDataInput): User!

  """Update when Viewer Settings change"""
  updateViewerSettings(input: UpdateViewerSettingsInput): User!
}

input PomCycleUpdateInput {
  date: String
  increasePomCounter: Boolean
  pomCycle: pomCycle
}

type PomEntry {
  count: Int
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  userId: String
}

type Query {
  authUrl: String!
  me: User!
  viewerCurrentTasks: [Task]
  viewerPomData: User!
}

type Task {
  amt: Int
  createdAt: DateTime
  eta: DateTime
  id: ID
  positionId: Int
  title: String
  updatedAt: DateTime
  userId: String
}

input TaskId {
  id: ID
}

type Tasks {
  tasks: [Task]
}

input UpdateTasksPositionsInput {
  taskIds: [TaskId]
}

input UpdateViewerDataInput {
  date: String
  increasePomCounter: Boolean
  longBreakDuration: Int
  longBreakInterval: Int
  pomCycle: pomCycle
  pomDuration: Int
  shortBreakDuration: Int
}

input UpdateViewerSettingsInput {
  longBreakDuration: Int
  longBreakInterval: Int
  pomDuration: Int
  shortBreakDuration: Int
}

type User {
  """User avatar(picture)"""
  avatar: String

  """
  (not a db field) Confirmation that the user's request came back to the client
  """
  didRequest: Boolean!

  """Unique ID for the User"""
  id: ID

  """Long break after a certain amt of pomodoro cycles are met"""
  longBreakDuration: Int

  """
  The amt of pomodoro cycles(pom,shortBreak) that have to happen before a long break
  """
  longBreakInterval: Int

  """Name of the User"""
  name: String

  """Get the count for TODAY'S POM ENTRY"""
  pomCount(today: String!): Int

  """Current cycle(shortbreak, longbreak, or pomodoro)"""
  pomCycle: pomCycle

  """Generic duration for pomodoro"""
  pomDuration: Int

  """
  All the Pom Entries for all time. As in, all the work ever done counted
  """
  pomEntry(date: String!): PomEntry

  """Short break after pomodoro"""
  shortBreakDuration: Int

  """All tasks for an User"""
  tasks: [Task]!
  token: String
}

enum pomCycle {
  LONGBREAK
  POMODORO
  SHORTBREAK
}
